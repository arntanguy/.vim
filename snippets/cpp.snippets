# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}

snippet map
	std::map<${1:key}, ${2:value}> ${3:map};${4}
snippet vector
	std::vector<${1:std::string}> ${2:v};${3}
snippet list
	std::list<${1:std::string}> ${2:v};${3}
snippet set
	std::set<${1:std::string}>  ${2:s};${3}
snippet multiset
	std::set<${1:std::string}>  ${2:s};${3}

# Iterators
snippet vectorit
	std::vector<${1:std::string}>::iterator ${2:it};${3}
snippet listit
	std::list<${1:std::string}>::iterator ${2:it};${3}
snippet mapit
	std::map<${1:key}, ${2:value}>::iterator ${3:it};${3}
snippet setit
	std::set<${1:std::string}>::iterator ${3:it};${3}
snippet iter
	${1:type}<${2:typedef}>::iterator ${3:it};${4}


# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet class
	class ${1:`Filename('$1', 'name')`} 
	{
		private:
			${3:/* data */}
		public:
			$1 (${2:arguments});
			virtual ~$1 ();
		
	};
snippet struct
	struct ${1:`Filename('$1', 'name')`} 
	{
	}


snippet cldef
	#include "${1:`Filename('$1', 'name')`}.h"
	${2}
# Class implementation
snippet climp
	${1:`Filename('$1', 'name')`}::$1() 
	{
	}
	$1::~$1()
	{
	}
	${2}
snippet mimp
	${1:type} ${2:`Filename('$1', 'name')`}::${3:memberName}(${4:arguments})
	{
		${5}
	}

snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++} ) {
			${4:/* code */}
	}

snippet foreach 
	${1:std::vector}<${2:std::string}>::iterator ${3:it};
	for( $3 = ${4:objectName}.begin() ; $3 != $4.end(); $3++ ) {
		${5}
	}

snippet forit
	for (${1:it} = ${2:object}.begin() ; $1 != $2.end() ; $1++) {
		${3:/* code */}
	}

